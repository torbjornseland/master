TITLE: Geographic models with focus on Fisher Kolmogoroff equation
AUTHOR: Torbj√∏rn Seland
DATE: today

TOC: on

===== Introduction =====
This chapter will introduce a new model for epidemic diseases. While the first chapter was based on a ODE system, will this chapter expand the system to consist of a geographic spread of epidemics. The two first sections will be based on chapters from Murray, while the last part will consist of a modelling of the zombiefication problem explained in chapter 1.

===== Fisher-Kolmogoroff equation =====


===== Simple system for spatial spread =====
While the systems in the previous chapter only consisted of the temporal variable _t_ in the functions, a spatial variable, _x_ will now be introduced. This means that the position has an effect on the change in each class. The system that will be shown here, will be based on the simple ODE system presented in the previous chapter. The difference will be the diffusion part added to each equation. The system can be seen under 
!bt
\begin{equation} label{eq:simple_PDE}
	\begin{aligned}
	\frac{\partial S}{\partial t} &= -rIS + D\nabla ^2 S\\
	\frac{\partial I}{\partial t} &= rIS- aI + D\nabla ^2 I\\
	\frac{\partial R}{\partial t} &= aI + D\nabla ^2 R
	\end{aligned}
\end{equation}
!et
All three classes have the same diffusion coefficient, $D$. $rIS$ and $aI$ will work in the same way as in the ODE system. Since this model taking into account the position, the idea is here to model a group of infective that moves into a uniform population with susceptible, which is spread around with the density $S_0$. Then the geotemporal spread can be seen. The problem will be consider as one-dimensional. The system will first be nondimensionalise by writing 
!bt
\begin{equation} label{eq:constants_nondimensional}
	\begin{aligned}
	I^* =\frac{I}{S_0},&\quad I^* = \frac{I}{S_0},&\quad R^*= \frac{R}{S_0},&\\
	x^* =\left(\frac{rS_0}{D}\right)^{1/2}x,&\quad t^*=rS_0t,&\quad \lambda =\frac{a}{rS_0},&
	\end{aligned}
\end{equation}
!et
$S_0$ is here used as a representative population. Now the model(ref{eq:simple_PDE}) can be expressed under. Here the asterisks have been dropped.
!bt
\begin{equation} label{eq:simple_non_PDE}
	\begin{aligned}
	\frac{\partial S}{\partial t} &= -IS + \frac{\partial^2 S}{\partial x^2},\\
	\frac{\partial I}{\partial t} &= IS- \lambda I + \frac{\partial^2 I}{\partial x^2},\\
	\frac{\partial R}{\partial t} &= \lambda I + \frac{\partial^2 R}{\partial x^2},
	\end{aligned}
\end{equation}
!et
The three parameters $r$, $a$ and $D$ have now been replaced by $\lambda$. The *reproduction rate* that was presented for the ODE model in the previous chapter can be seen by $1/\lambda $. This has here a couple of equivalent meanings. $1/\lambda$ can be seen as the number of secondary infections produced by one primary infected. It can also be used to measure two different time scales. The first one, $1/(rS_0)$, measure the contagious time of the disease. The second one can look at the life expectancy for an infective. This can be described $1/a$.
<linebreak>
<linebreak>
The problem that this part will focus on, is the travelling wave. Here seen by a pulse of infected into a group of susceptible. Then a travelling wave solution has to be set,
!bt
\begin{equation}
I(x,t)=I(z),\quad S(x,t)=S(z),\quad R(x,t) = R(z),\quad z = x-ct,
\end{equation}
!et
Here the value $c$ will be the wave speed. This represents a wave of constant shape that travels in the positive x-direction. These can now be inserted into (ref{eq:simple_non_PDE}). This gives the following ordinary system
!bt
\begin{equation} label{eq:ord_diff_sys}
	\begin{aligned}
	S'' + cS' - IS &= 0,\\
	I'' + cI' + I(S-\lambda)&=0\\
	R'' + cR  + I\lambda &=0
	\end{aligned}
\end{equation}
!et
This gives an eigenvalue problem to find the range of $\lambda$ so that $c$ always will be positive. The values of $S$, $I$ and $R$ also has to stay nonnegative. This leads to
!bt
\begin{equation} 
	\begin{aligned}
	0 \leq S(-\infty) < S(\infty)&=1\\
	I(-\infty)=I(\infty)&=0,\\
	1 \geq R(-\infty)\geq R(\infty) &= 0
	\end{aligned}
\end{equation}
!et

#MOVIE:[plots/Travelling_wave.webm, height=500 width=600] This simulation is based on (ref{eq:ord_diff_sys}) with $\lambda=0.5$. The initial data is sat to $S(x,0)=1$ and $R(x,0)=0$. The left side of the *Infective* class, $I(0,0), is based on a gaussian curve. The rest is sat to be zero.

FIGURE:[plots/trav_wave_sub.png,height=600 width=800 frac=0.8] label{fig:1D_sub} A gauss curve is inserted on the left side. This causes a travelling wave. The size is measured at $x=15$ and can be seen in figure (ref{fig:1D_tw}). 

FIGURE:[plots/epidemic_wave_z_lambda_0_5.png] label{fig:1D_tw} This shows the epidemic wave measures at at $x=15$ in figure(ref{fig:1D_sub})

The system(ref{eq:ord_diff_sys}) is a fourth order phase space system. The lower bound time speed for $c$ can be found. J.D Murray shows this in *kite{Murray}*. The *Infective* class in the system(ref{eq:ord_diff_sys}) can be linearised when $z\rightarrow \infty$ $S\rightarrow 1$ and $I \rightarrow 0$. The result then become 
!bt
\begin{equation}
	I'' + cI' + I(S-\lambda) \approx 0 
\end{equation}
!et
This can be found by
!bt
\begin{equation}
I(z) \varpropto \exp\left[(-c \pm {c^2 -4(1-\lambda)}^{1/2})z/2\right]
\end{equation}
!et
It is required that $I(z)\rightarrow 0$, but not under. This means that the solution cannot oscillate around 0. If a travelling wave exist, it has to satisfy
!bt
\begin{equation}
	c \geq 2(1-\lambda)^{1/2}, \lambda< 1
\end{equation}
!et
If $\lambda > 1$, no travelling wave will exist. Then the disease will die out. The terms defined in (ref{eq:constants_nondimensional}) will give the threshold conditions,
!bt
\begin{equation}
	\lambda = \frac{a}{rS_0} < 1
\end{equation}
!et
This is the same value that was given for the ODE model in the previous chapter.
===== Verifying the solution =====
=== Constant solution ===
To verify this solution a couple of tests can be done one the system. The first test will be a constant test, where a known constant solution is given. A look at the previous system will give an idea on performing the test.
!bt
\begin{equation} label{eq:simple_non_PDE2}
	\begin{aligned}
	\frac{\partial S}{\partial t} &= -IS + \frac{\partial^2 S}{\partial x^2},\\
	\frac{\partial I}{\partial t} &= IS- \lambda I + \frac{\partial^2 I}{\partial x^2},\\
	\frac{\partial R}{\partial t} &= \lambda I + \frac{\partial^2 R}{\partial x^2},
	\end{aligned}
\end{equation}
!et
By setting the solutions to constants, $S = C_s,I=C_i,R=C_r$, the value of $C_i$ has to be 0. This is a poor test and several bugs can escape. The following system can be expanded by adding $\beta R$ to the system. This give the chance to check the value of $R$ and the constants can be set to a different value than 0.  
!bt
\begin{equation} label{eq:constant_PDE}
	\begin{aligned}
	C_IC_S &= \beta C_r \\
	C_IC_S &= \lambda C_I \\
	\lambda C_I &= -\beta C_R 
	\end{aligned}
\end{equation}
!et
The constant values can freely be chosen. Here they are sat to $C_S = 1.2,C_I=0.8,C_R=0.6$. This give $\lambda=1.2$ and $\beta=1.6$. A test can be made

@@@CODE verify_sol.py fromto: def test_constant_solution@def test_manufactured_solution

This test was fine and next test that can be done on the system is a Manufactured solution
=== Manufactured solution ===
By constructing a function to each equation in the system (ref{eq:simple_non_PDE}), a manufactured solution can be created. Here $S$,$I$ and $R$ are pre produced. The system will be
!bt
\begin{equation} label{eq:simple_non_PDE2}
	\begin{aligned}
	\frac{\partial S}{\partial t} &= -IS + \frac{\partial^2 S}{\partial x^2}+f(x,t),\\
	\frac{\partial I}{\partial t} &= IS- \lambda I + \frac{\partial^2 I}{\partial x^2}+g(x,t),\\
	\frac{\partial R}{\partial t} &= \lambda I + \frac{\partial^2 R}{\partial x^2}+h(x,t),
	\end{aligned}
\end{equation}
!et
where $f$,$g$ and $h$ are constructed functions to achieve the expected results for $S$, $I$ and $R$. In this case the functions will be:
!bt
\begin{equation}
	\begin{aligned}
	f(x,t) = \frac{\partial S}{\partial t} + IS - \frac{\partial^2 S}{\partial x^2}\\
	g(x,t) = \frac{\partial I}{\partial t} - IS + \lambda I - \frac{\partial^2 I}{\partial x^2}\\
	h(x,t) = \frac{\partial R}{\partial t} -\lambda I - \frac{\partial^2 R}{\partial x^2},
	\end{aligned}
\end{equation}
!et
When choosing the expected function for the classes, it is important that the fulfill the boundary conditions
!bt
\begin{equation}
    u_x(0,t) = u_x(X,t) = 0
\end{equation}
!et
The quantities have here been sat to:
!bt
\begin{equation}
	\begin{aligned}
    S(x,t) = cos(\frac{\pi}{X}x)t\\
    I(x,t) = cos(\frac{\pi}{X}x)t\\
    R(x,t) = cos(\frac{\pi}{X}x)t
	\end{aligned}
\end{equation}
!et
Now `sympy` can be used to do the calculations

!bc pycod
>>> from sympy import *
>>> x,t,lam = symbols('x t lam')
>>> def s_simple(x,t):
...     return cos(pi*x)*t
... 
>>> def i_simple(x,t):
...     return cos(pi*x)*t
... 
>>> def r_simple(x,t):
...     return cos(pi*x)*t
... 
>>> for x_point in 0,1:
...     print "s_x(%s,t): ", % x_point,
>>> for x_point in 0,1:
...     print "s_x(%s,t): " % x_point,
...     print diff(s_simple(x,t),x).subs(x,x_point).simplify()
...     print "i_x(%s,t): " % x_point,
...     print diff(i_simple(x,t),x).subs(x,x_point).simplify()
...     print "r_x(%s,t): " % x_point,
...     print diff(r_simple(x,t),x).subs(x,x_point).simplify()
... 
s_x(0,t):  0
i_x(0,t):  0
r_x(0,t):  0
s_x(1,t):  0
i_x(1,t):  0
r_x(1,t):  0
>>> s = s_simple(x,t)
>>> i = i_simple(x,t)
>>> r = r_simple(x,t)
>>> f = diff(s,t)+i*s-diff(diff(s,x),x)
>>> print f.simplify()
(t**2*cos(pi*x) + pi**2*t + 1)*cos(pi*x)
>>> g = diff(i,t)-i*s+lam*i-diff(diff(i,x),x)
>>> print g.simplify()
(lam*t - t**2*cos(pi*x) + pi**2*t + 1)*cos(pi*x)
>>> h = diff(r,t)-lam*i-diff(diff(r,x),x)
>>> print h.simplify()
(-lam*t + pi**2*t + 1)*cos(pi*x)
!ec
Which give
!bt
\begin{equation}
	\begin{aligned}
	f(x,t) &= (t^2\cos(\pi x) + \pi^2t + 1)\cos(\pi x)\\
	g(x,t) &= (\lambda t - t^2\cos(\pi x) + \pi^2t + 1)\cos(\pi x)\\
	h(x,t) &= (-\lambda t + \pi^2t + 1)\cos(\pi x)
	\end{aligned}
\end{equation}
!et

The following manufactured test will then be
@@@CODE verify_sol.py fromto: def test_manufactured_solution@def solver()

The expected error can be found by some calculations. Here the susceptible class $S$ will be calculated
!bt
\begin{equation}
	\begin{aligned}
	\frac{\partial S}{\partial t} &= -IS + \frac{\partial^2 S}{\partial x^2}+f(x,t),\\
	S^{n+1}_i &=S^{n}_i + \Delta t\left(-I^{n}_{i}S^{n}_{i} + \frac{S^{n}_{i-1}-2S^{n}_{i}+S^{n}_{i+1}}{\Delta x^2}+f(x,t)\right),\\
	S^{n+1}_i &=cos(\pi x)t+\Delta t\left( -(\cos(\pi x)t)^2 + \frac{\cos(\pi (x-\Delta x))t-2\cos(\pi x)t+\cos(\pi (x+\Delta x))t}{\Delta x^2}+f(x,t)\right),
	\end{aligned}
\end{equation}
!et
By using some trigonometric identities, the following rewriting can be done

!bt
\begin{equation}
	\begin{aligned}
    \cos(\pi(x+\Delta x)) &= \cos(\pi x)\cos(\pi \Delta x)-\sin(\pi x)\sin(\pi \Delta x)\\
    \cos(\pi(x-\Delta x)) &= \cos(\pi x)\cos(\pi \Delta x)+\sin(\pi x)\sin(\pi \Delta x)
	\end{aligned}
\end{equation}
!et
This can be used into $\frac{\partial^2 S}{\partial x^2}$, and with some simplifications,

!bt
\begin{equation}
	\begin{aligned}
	S^{n+1}_i &=cos(\pi x)t+\Delta t\left( -(\cos(\pi x)t)^2 + \frac{2t\cos(\pi x)(\cos(\pi \Delta x)-1)}{\Delta x^2}+(t^2\cos(\pi x) + \pi^2t + 1)\cos(\pi x)\right),\\
	S^{n+1}_i &=cos(\pi x)(t+\Delta t) + \Delta t\cos(\pi x) t \left(\frac{2(\cos(\pi \Delta x)-1)}{\Delta x^2}+\pi^2\right),\\
	\end{aligned}
\end{equation}
!et
This analysis of the expected result gives an indication on the error. When $\Delta t$ or $\Delta x$ goes towards 0, the last part of the equation,
!bt
\begin{equation}
\Delta t\cos(\pi x) t \left(\frac{2(\cos(\pi \Delta x)-1)}{\Delta x^2}+\pi^2\right),\\
\end{equation}
!et
will go towards 0 and the correct solution will be left. It is easy to see that $\Delta t$ will lead to a correct solution. But it is harder to see for $\Delta x$. By using L'Hopitals on the expression, the threshold for $\Delta x \rightarrow 0$ can be found.
!bt
\begin{equation}
	\begin{aligned}
    \frac{2(\cos(\pi \Delta x)-1)}{\Delta x^2}\\
    \frac{-2\pi(\sin(\pi \Delta x))}{2\Delta x}\\
    \frac{-2\pi^2\cos(\pi \Delta x)}{2}\\
	\end{aligned}
\end{equation}
!et
This gives $-\pi^2$. 
=== Convergence rate ===
To check the program, the convergence rate can be checked. Since this discretization consist of a Forward Euler, a first order error is expected. This can be found by

===== Check the global error =====

===== From 1D to 2D =====
Since an epidemic disease will spread geograpically, it will be interesting to look at the model in 2D. The following equation can then be discretized 
=== A gaussian wave ===
#MOVIE:[plots/2D_gaussian.webm, height=500 width=600] Travelling wave modeled with the same values as for 1D.

FIGURE:[plots/2D_gauss_sub.png,height=600 width=800 frac=0.8]The PDE system (ref{eq:simple_non_PDE}) simulated for a 2D system with $\lambda=0.5$. A gauss wave from $x=0$.

=== A gaussian function at 0,0 ===

MOVIE:[plots/2D_one_corner.webm, height=500 width=600] Starting the travelling wave from the corner.

FIGURE:[plots/2D_gauss_one_sub.png,height=600 width=800 frac=0.8]A gaussian function from $x=0,y=0$ based on the PDE system (ref{eq:simple_non_PDE}) with $\lambda=0.5$  

FIGURE:[plots/TW_2D_corner_z_lambda_0_5.png,height=600 width=800 frac=0.8] The travelling wave measured at point 15,15. The wave moves quite similar to the 1D example above 
1D
1.4340793845
1.43143259034 dt = $1\cdot10^{-3}$, dx = 0.05
1.43195870243 dt = 0.0002, dx^2 = 0.000625
|------------------------------------------|
|1D wave       |2D wave line |2D wave point|
|------------------------------------------|
|1.43195870243 |1.43484000394|0            |
|------------------------------------------|
Compare the values from 1D and 2D by making a table
Result: Looks from the plots that there is no change(as expected)

=== Change in initial flow ===

MOVIE:[plots/2D_initial_variable.webm, height=500 width=600] Travelling wave with a greater initial wave.

FIGURE:[plots/2D_initial_variable_sub.png,height=600 width=800 frac=0.8]Four plots 

FIGURE:[plots/TW_2D_initial_z_lambda_0_5.png,height=600 width=800 frac=0.8] The wave appear earlier, but it has the same size. 


Result: Looks from the plots that the travelling wave appears ealier, but has the same size. This can be explained by "Child on a slede"

=== Chage in the lambda ===

FIGURE:[plots/2D_lambda_variable.png, height=600 width=800] With a small $\lambda$, the travelling wave will increase. And when $\lambda \rightarrow 1$ the wave will disappear.  

======= Epidemic in an English Boarding school 1978 =======
This example was presented in the previous chapter as an ODE system. This example was based on the book from J.D Murray.

Classes are uniformly spread and it is equal probability for contact. The concentration of students are given in number of students per 1m2
r will be reduced with Nx2, while a is the same.

MOVIE:[plots/2D_british_school.webm, height=500 width=600] Acts like the ODE system

FIGURE:[plots/2D_british_school_sub.png, height=600 width=800 frac=0.8]

FIGURE:[plots/2D_british_school_number.png, height=600 width=800 frac=0.8] This PDE system gives the same results as the ODE system in the previous chapter. This is as expected since the students are uniformly spread and the diffusion is sat to 1 for all the classes

Introducing a Gaussian distribution

MOVIE:[plots/2D_british_school_gauss.webm, height=500 width=600] The sick one is placed in the center of the School area.

FIGURE:[plots/2D_british_school_gauss_sub.png, height=600 width=800 frac=0.8]

FIGURE:[plots/2D_british_school_gauss_number.png, height=600 width=800 frac=0.8] This seems to have no effect and the spread of the disease is similar to the one above. But if a student is lucky to stand in one corner, he has a greater chance to stay healthy  

Gaussain from the corner. This one gives other results. It has a slower diffusion.

MOVIE:[plots/2D_british_school_gauss_corner.webm, height=500 width=600] A wave of infected moves towards the school yard

FIGURE:[plots/2D_british_school_gauss_corner_sub.png, height=600 width=800 frac=0.8]

FIGURE:[plots/2D_british_school_gauss_corner_number.png, height=600 width=800 frac=0.8] This simulation gives another result. Here the number of infected increase later than in the previous examples

!split
======= Zombiefication =======
Create the same results as for the ODE simulation.

Initial phase

MOVIE:[plots/2D_zombie_initial_cond.webm, height=500 width=600] 

FIGURE:[plots/2D_zombie_initial_cond_sub.png, height=600 width=800 frac=0.8]

FIGURE:[plots/2D_zombie_initial_cond_number.png, height=600 width=800 frac=0.8]Creates the same results as for the ODE system

The three phases

MOVIE:[plots/2D_zombie_three_phases.webm, height=500 width=600]

FIGURE:[plots/2D_zombie_three_phases_sub.png, height=600 width=800 frac=0.8]

FIGURE:[plots/2D_zombie_three_phases_number.png, height=600 width=800 frac=0.8] Same results as for the ODE system in the previous chapter

Able to produce the same results as for the ODE

ODE results

---------------------
time, 0.000000
S_n 621.0
I_n 0.0
Z_n 1.0
R_n 0.0
---------------------
time, 3.000000
S_n 71.2973582098
I_n 230.848367121
Z_n 298.873127347
R_n 20.9812508213
---------------------
time, 33.000000
S_n 61.6100739089
I_n 0.310909545827
Z_n 358.579528667
R_n 201.500626378
---------------------
time, 34.000000
S_n 57.7976621629
I_n 1.1578809554
Z_n 331.784821898
R_n 231.260807984


PDE results

---------------------
time=0.000000
Susceptible = 621.00
Infective = 0.00
Zombies = 1.00
Removed = 0.00
---------------------
time=3.000000
Susceptible = 71.54
Infective = 230.57
Zombies = 298.91
Removed = 20.97
---------------------
time=33.000000
Susceptible = 61.83
Infective = 0.32
Zombies = 357.89
Removed = 201.96
---------------------
time=34.000000
Susceptible = 58.02
Infective = 1.16
Zombies = 331.08
Removed = 231.74

=== Start from the middle ===
Diffusion is 0 for the removed class. Gauss curve from the middle

MOVIE:[plots/2D_zombie_three_phases_gauss.webm, height=500 width=600]

FIGURE:[plots/2D_zombie_three_phases_gauss_sub.png, height=600 width=800 frac=0.8]

FIGURE:[plots/2D_zombie_three_phases_gauss_number.png, height=600 width=800 frac=0.8] By using the same parameters, the result seems to be different. Can be explained by the fact that only a small part of the area is in contact with the infected one.It takes some time before everyone are connected to the disease.

Values each phase with dt= $5 \cdot 10^{-4}$ 
---------------------
time=0.000000
Susceptible = 621.00
Infective = 0.00
Zombies = 1.77
Removed = 0.00
---------------------
time=3.000000
Susceptible = 81.12
Infective = 210.94
Zombies = 310.11
Removed = 20.60
---------------------
time=33.000000
Susceptible = 70.55
Infective = 0.34
Zombies = 334.33
Removed = 217.56
---------------------
time=34.000000
Susceptible = 66.50
Infective = 1.23
Zombies = 305.86
Removed = 249.19
=== Variation in diffusion ===
plots/2D_zombie_three_phases_initial_spread.webm, 
MOVIE:[plots/2D_zombie_three_phases_initial_spread.webm, height=500 width=600] Created with different diffusion constants. The groups of susceptible are placed in three different areas. 

FIGURE:[plots/2D_zombie_three_phases_initial_spread_sub.png, height=600 width=800 frac=0.8]

FIGURE:[plots/2D_zombie_three_phases_initial_spread_number.png, height=600 width=800 frac=0.8]

plots/2D_zombie_three_phases_initial_spread_2"

MOVIE:[plots/2D_zombie_three_phases_initial_spread_2.webm, height=500 width=600] Created with different diffusion constants. The groups of susceptible are placed in three different areas. 

FIGURE:[plots/2D_zombie_three_phases_initial_spread_2_sub.png, height=600 width=800 frac=0.8]

FIGURE:[plots/2D_zombie_three_phases_initial_spread_2_number.png, height=600 width=800 frac=0.8]

moviename = "plots/2D_zombie_three_phases_spatial_control"

MOVIE:[plots/2D_zombie_three_phases_spatial_control.webm, height=500 width=600] Created with different diffusion constants. The groups of susceptible are placed in three different areas. 

FIGURE:[plots/2D_zombie_three_phases_spatial_control_sub.png, height=600 width=800 frac=0.8]

FIGURE:[plots/2D_zombie_three_phases_spatial_control_number.png, height=600 width=800 frac=0.8]

moviename = "plots/2D_zombie_three_phases_spatial_control_3_init"

MOVIE:[plots/2D_zombie_three_phases_spatial_control_3_init.webm, height=500 width=600] Created with different diffusion constants. The groups of susceptible are placed in three different areas. 

FIGURE:[plots/2D_zombie_three_phases_spatial_control_3_init_sub.png, height=600 width=800 frac=0.8]

FIGURE:[plots/2D_zombie_three_phases_spatial_control_3_init_number.png, height=600 width=800 frac=0.8]

!split
=== Where does the infected one arises ===

Small town
moviename = "plots/2D_zombie_three_phases_zombie_small_town"

MOVIE:[plots/2D_zombie_three_phases_zombie_small_town.webm, height=500 width=600] Created with different diffusion constants. The groups of susceptible are placed in three different areas. 

FIGURE:[plots/2D_zombie_three_phases_zombie_small_town_sub.png, height=600 width=800 frac=0.8]

FIGURE:[plots/2D_zombie_three_phases_zombie_small_town_number.png, height=600 width=800 frac=0.8]

MOVIE:[plots/2D_zombie_three_phases_zombie_small_town_surface.webm, height=500 width=600] Created with different diffusion constants. The groups of susceptible are placed in three different areas. 

FIGURE:[plots/2D_zombie_three_phases_zombie_small_town_surface_sub.png, height=600 width=800 frac=0.8]

Middle town

moviename = "plots/2D_zombie_three_phases_zombie_middle_town"

MOVIE:[plots/2D_zombie_three_phases_zombie_middle_town.webm, height=500 width=600] Created with different diffusion constants. The groups of susceptible are placed in three different areas. 

FIGURE:[plots/2D_zombie_three_phases_zombie_middle_town_sub.png, height=600 width=800 frac=0.8]

FIGURE:[plots/2D_zombie_three_phases_zombie_middle_town_number.png, height=600 width=800 frac=0.8]

MOVIE:[plots/2D_zombie_three_phases_zombie_middle_town_surface.webm, height=500 width=600] Created with different diffusion constants. The groups of susceptible are placed in three different areas. 

FIGURE:[plots/2D_zombie_three_phases_zombie_middle_town_surface_sub.png, height=600 width=800 frac=0.8]

Large town
moviename = "plots/2D_zombie_three_phases_zombie_large_town"

MOVIE:[plots/2D_zombie_three_phases_zombie_large_town.webm, height=500 width=600] Created with different diffusion constants. The groups of susceptible are placed in three different areas. 

FIGURE:[plots/2D_zombie_three_phases_zombie_large_town_sub.png, height=600 width=800 frac=0.8]

FIGURE:[plots/2D_zombie_three_phases_zombie_large_town_number.png, height=600 width=800 frac=0.8]

MOVIE:[plots/2D_zombie_three_phases_zombie_large_town_surface.webm, height=500 width=600] Created with different diffusion constants. The groups of susceptible are placed in three different areas. 

FIGURE:[plots/2D_zombie_three_phases_zombie_large_town_surface_sub.png, height=600 width=800 frac=0.8]

=== Lock in different areas ===
moviename = "plots/2D_zombie_three_phases_blindern_area"

MOVIE:[plots/2D_zombie_three_phases_blindern_area_contourf.webm, height=500 width=600] Created with different diffusion constants. The groups of susceptible are placed in three different areas. 

FIGURE:[plots/2D_zombie_three_phases_blindern_area_contourf_sub.png, height=600 width=800 frac=0.8]

FIGURE:[plots/2D_zombie_three_phases_blindern_area_number.png, height=600 width=800 frac=0.8]

Three phases

MOVIE:[plots/2D_zombie_three_phases_blindern_area_3_ph_contourf.webm, height=500 width=600] Created with different diffusion constants. The groups of susceptible are placed in three different areas. 

FIGURE:[plots/2D_zombie_three_phases_blindern_area_3_ph_contourf_sub.png, height=600 width=800 frac=0.8]

FIGURE:[plots/2D_zombie_three_phases_blindern_area_3_ph_number.png, height=600 width=800 frac=0.8]

MOVIE:[plots/2D_zombie_three_phases_blindern_area_3_ph_surface.webm,height=500 width=600]
======= Appendix =======
===== Discretization PDE system for a 2D model =====
The following PDE system from (ref{eq:simple_non_PDE}) is discretized. Forward Euler is chosen for time derivative and Crank Nicolson for spatial derivative.
!bt
\begin{equation}
	\begin{aligned}
    \frac{S^{n+1}_{i,j}-S^n_{i,j}}{\Delta t} &= -I^{n}_{i,j}S^{n}_{i,j} + \left(\frac{S^{n}_{i-1,j}-2S^{n}_{i,j}+S^{n}_{i+1,j}}{\Delta x}+\frac{S^{n}_{i,j-1}-2S^{n}_{i,j}+S^{n}_{i,j+1}}{\Delta y}\right) \\
    \frac{I^{n+1}_{i,j}-I^n_{i,j}}{\Delta t} &= I^{n}_{i,j}S^{n}_{i,j} -\lambda I^{n}_{i,j} + \left(\frac{I^{n}_{i-1,j}-2I^{n}_{i,j}+I^{n}_{i+1,j}}{\Delta x}+\frac{I^{n}_{i,j-1}-2I^{n}_{i,j}+I^{n}_{i,j+1}}{\Delta y}\right) \\
    \frac{R^{n+1}_{i,j}-R^n_{i,j}}{\Delta t} &= \lambda I^{n}_{i,j}+\left(\frac{R^{n}_{i-1,j}-2R^{n}_{i,j}+R^{n}_{i+1,j}}{\Delta x}+\frac{R^{n}_{i,j-1}-2R^{n}_{i,j}+R^{n}_{i,j+1}}{\Delta y}\right) 
	\end{aligned}
\end{equation}
!et
Now the known values can be placed on the right side. The system will then be
!bt
\begin{equation}
	\begin{aligned}
    S^{n+1}_{i,j} &= S^{n}_{i,j}+\Delta t\left(-I^{n}_{i,j}S^{n}_{i,j} + \left(\frac{S^{n}_{i-1,j}-2S^{n}_{i,j}+S^{n}_{i+1,j}}{\Delta x}+\frac{S^{n}_{i,j-1}-2S^{n}_{i,j}+S^{n}_{i,j+1}}{\Delta y}\right)\right) \\
    I^{n+1}_{i,j} &= I^{n}_{i,j}+\Delta t\left(I^{n}_{i,j}S^{n}_{i,j} -\lambda I^{n}_{i,j} + \left(\frac{I^{n}_{i-1,j}-2I^{n}_{i,j}+I^{n}_{i+1,j}}{\Delta x}+\frac{I^{n}_{i,j-1}-2I^{n}_{i,j}+I^{n}_{i,j+1}}{\Delta y}\right)\right) \\
    R^{n+1}_{i,j} &= R^{n}_{i,j}+\Delta t\left(\lambda I^{n}_{i,j}+\left(\frac{R^{n}_{i-1,j}-2R^{n}_{i,j}+R^{n}_{i+1,j}}{\Delta x}+\frac{R^{n}_{i,j-1}-2R^{n}_{i,j}+R^{n}_{i,j+1}}{\Delta y}\right)\right) 
	\end{aligned}
\end{equation}
!et
===== Discretization =====
!bt
\begin{equation} \label{eq:LMR_model}
	\begin{aligned} 
	\frac{dS}{dt} =& \Sigma -\beta SZ - \delta_SS + \nabla(\gamma_s(x)\nabla S) \\
	\frac{dI}{dt} =& \beta SZ - \varrho I - \delta_II+\nabla(\gamma_I(x)\nabla I)\\
	\frac{dZ}{dt} =& \varrho I- (\alpha+\omega(t))SZ + \zeta R+ \nabla(\gamma_Z(x)\nabla Z)\\
	\frac{dR}{dt} =& \delta_SS +\delta_II -\zeta R + (\alpha+\omega(t))SZ 
	\end{aligned}
\end{equation}
!et
The calculations will be shown for the diffusion part in the first equation. This idea will be used for the whole system

!bt
\begin{equation}
	\begin{aligned}
	\frac{dS}{dt} =& \nabla(\gamma_s(x)\nabla S) \\
    \frac{S^{n+1}_{i,j}-S^n_{i,j}}{\Delta t} &= \left(\gamma(x_{i+1/2,j})\frac{S^{n}_{i-1,j}-2S^{n}_{i,j}+S^{n}_{i+1,j}}{\Delta x}+\frac{S^{n}_{i,j-1}-2S^{n}_{i,j}+S^{n}_{i,j+1}}{\Delta y}\right) 
	\end{aligned}
\end{equation}
!et
