TITLE: Presentation of project in inf5631
AUTHOR: Torbj√∏rn Seland
DATE: today


#doconce format html project_torbjorn.do.txt --pygments_html_style=native --keep_pygments_html_bg --encoding=utf-8
#doconce slides_html project_torbjorn reveal --html_slide_theme=darkgray
!split
======= Short presentation of project =======
Study of the Density-Dependent Diffusion-Reaction-Diffusion Model Ref.(ref{eq:reaction_diffusion})
!bt
\begin{align} label{eq:reaction_diffusion}
u_t =& \nabla \cdot \alpha(u)\nabla u + f(u)\\
u(x,0) =& I(x)\notag \\
u(0,t)=& 0\notag \\
u(L,t)=& 0\notag
\end{align}
!et

Overview of the presentation
* Fisher-Kolmogoroff equation
* Travelling wavefront
* Reaction term
* Diffusion term
* Solution of the biological equation
* Further work


!split
======= Fisher Kolmogoroff equation =======
* The Fisher-Kolmogoroff equation can be produced by replacing $\alpha(u)=k$, where $k$ is a constant, and $f(u) = ru(1-\frac{u}{M})$ in Eq.(ref{eq:reaction_diffusion}).
* This was proposed as a one-dimensional model by Fisher(1937) to describe the spread of an advantageous gene in a population. 
* Kolmogoroff et al.(1937) did a study of this equation and obtained some of the basic analytical results Ref.cite{murray2002mathematical}. 
!bt
\begin{equation} label{eq:fish_kol}
\frac{\partial u}{\partial t} = k\frac{\partial^2u}{\partial x^2}+ru(1-\frac{u}{M})
\end{equation}
!et
!split
======= Travelling wavefront =======
===== Motivation for the travelling wavefront =====
A wave that travels without any changes in the shape and has a constant, is called a travelling wave. 
!bt
\begin{equation} label{eq:wave_constant}
u(x,t) = u(x-ct) = u(z), z = x-ct
\end{equation}
!et
If we look for a travelling wave solution of the (ref{eq:wave_constant}), the partial differential equation can be written as ordinary differential equations. 
!bt
\begin{equation}
	\begin{aligned}
    \frac{\partial u}{\partial t} &= -c\frac{du}{dz} \\
    \frac{\partial u}{\partial x} &= \frac{du}{dz}
	\end{aligned}
\end{equation}
!et
To be physically realistic, the concentration of the quantity cannot be negative and $u(z)$ has to be bounded by $z$. The ordinary differential equations can be inserted into a standard diffusion equation. 
!bt
\begin{equation}
\frac{\partial u}{\partial t} = k\frac{\partial^2u}{\partial x^2}
\end{equation}
!et
Will give
!bt
\begin{equation}
k\frac{d^2u}{dz^2} + c\frac{du}{dz} = 0,\hspace{8mm} \Rightarrow \hspace{8mm} u(z) = A + Be^{-cz/k} 
\end{equation}
!et
Then $B$ needs to be zero, since the exponential becomes unbounded when $z\rightarrow -\infty$. Then the wave solution ends up as $u(z)=A$, which is a constant value, and not a wave solution. The reaction term, $f(u)$, was therefore added to the equation. This term can exhibit travelling wave solutions. 

!split
===== Analytical solution =====
The equation can be rescaled. And this results in
the equation
!bt
\begin{equation} label{eq:ord_diff}
U'' +cU' + U(1-U) = 0
\end{equation}
!et
An analytical solution of Eq.(ref{eq:ord_diff}) can be written, with the following parameter values
!bt
a = \sqrt{2}-1,\hspace{8mm} s= 2,\hspace{8mm}b = \frac{1}{\sqrt{6}},\hspace{8mm}c=\frac{5}{\sqrt{6}}
!et
The function for the analytical wavefront solution will then be,
!bt
\begin{equation}
U(z) = \frac{1}{[1+(\sqrt{2}-1)=e^{\frac{z}{\sqrt{6}}}]^2}
\end{equation}
!et
The analytical simulation: 

MOVIE: [../prosjekt_inf5631/movies/wave_front_analytical.webm, height=500,width=600] label{fig:wavefront_analytical} 

The numerical solution with different $\Delta t$ can be compared to the analytical solution. Here $\Delta t$ varies from 0.4 to 0.02. 

MOVIE: [../prosjekt_inf5631/paramovies/reac_constant_wavefront_dt.webm, height=500,width=600] label{fig:compare_wavefronts} 


This table shows how the error goes to zero when $\Delta t$ goes towards zero. The order of the error approaches , which is the expected order for $\Delta t$ dt.

|------c--------------c--------------c-------|
| dt           | error        | order        |
|------c--------------c--------------c-------|
| 0.4          | 0.967214     | 0.0          |
| 0.08         | 0.408244     | 0.53         |
| 0.02         | 0.131734     | 0.81	     |
|--------------------------------------------|

!split
======= Reaction term =======
The reaction term describes the change in concentration in a certain point. This variation is only affected
by the local chemical reaction.
!bt
\begin{equation} label{eq:rec_term}
u_t = f(u)
\end{equation}
!et
To see the properties of this equation, it can be discretized and solved numerically for
different values of $f(u)$. Backward Euler is used for the discretization.
!bt
\begin{align*}
u_t =& f(u)\\
\frac{u^n_i-u^{n-1}_i}{\Delta t}=& f(u^n_i)\\
u^n_i-\Delta t f(u^n_i) =& u^{n-1}_i
\end{align*}
!et
This gives a linear equation $Au = b$ that easy can be solved. Here the Fisher Kolmogoroff is used
!bt
\begin{equation}
f(u) = ru(1-\frac{u}{M})
\end{equation}
!et
===== Picard Iteration =====
A Fisher-Kolmogoroff term is nonlinear, and a method is required to solve this term. Here, Picard is used. 
!bt
\begin{equation} label{eq:fish_term}
f(u) = ru(1-\frac{u}{M})
\end{equation}
!et
The idea in Picard iteration is to replace one of the $u$ values in the nonlinear part with a known $u\_$. 
!bt
\begin{equation*}
	u\_ = u^{n-1}
\end{equation*}
!et
The value of $u$ can be compared with the pre-produced $u\_$ each round. This can be adjusted to the expected error tolerance. A new $u\_$ can be produced by relaxation:
!bt
\begin{equation*}
u\_ = \gamma u + (1-\gamma)u\_,\qquad 0<= \gamma <=1
\end{equation*}
!et
The new equation will be
!bt
\begin{align*}
	u^n_i(1- \Delta t r(1-\frac{u\__i^n}{M}))=& u^{n-1}_i\\
\end{align*}
!et

===== Carrying capacity =====
Carrying capacity describes the maximum concentration for each point.

MOVIE: [../prosjekt_inf5631/paramovies/time.webm, height=500,width=600]

All simulations goes towards their carrying capacity and stabilizes here. 

===== Reproduction rate =====
The reproduction rate controls the speed of reproduction

MOVIE: [../prosjekt_inf5631/paramovies/time_r.webm, height=500,width=600]

This controls the speed towards carrying capacity. A larger reproduction rate will bring the solution faster
towards the steady state.

!split
===== Scaling =====
The function can be scaled to give a better overview of the parameters $r$ and $M$. The idea is get the solution dimensionless. A new function $\bar u(\bar t)$ with:
!bt
\begin{equation}
\bar u = \frac{u}{u_c}, \hspace{8 mm} \bar t = \frac{t}{t_c}
\end{equation}
!et
Here $u_c$ and $t_c$ are characteristic sizes of the range for $u$ and $t$. These values are set to be:
!bt
\begin{equation}
u_c = M,\hspace{8 mm} t_c = \frac{1}{r}
\end{equation}
!et
Fisher is inserted for $f(u)$.
!bt
\begin{align*}
\frac{\partial u}{\partial t} = ru(1-\frac{u}{M})\\
\frac{\partial (u_c\bar u)}{\partial \bar t}\frac{\partial \bar t}{\partial t} = ru_c\bar u(1-\frac{u_c\bar u}{M})\\
u_c\frac{\partial \bar u}{\partial \bar t}\frac{1}{t_c} = ru_c\bar u(1-\frac{u_c\bar u}{M})\\
\frac{\partial \bar u}{\partial \bar t} = t_c r\bar u(1-\frac{u_c\bar u}{M})\\
\frac{\partial \bar u}{\partial \bar t} = \bar u(1-\bar u)
\end{align*}
!et
The initial condition for $\bar u$ can be found by using the initial condition from $u(x,0)= gauss(x)$.
!bt
\begin{equation*}
\bar u(x,0) = \frac{u(x,0)}{u_c} = \frac{gauss(x)}{M}
\end{equation*}
!et
This can be plotted for different values of $M$

MOVIE: [../prosjekt_inf5631/movies/scaling.webm, height=500,width=600] 

The model breaks down if $M=0$, since this gives a nonexistent initial condition. 

!split
======= Diffusion term =======
!bt
\begin{equation}
	u_t = \nabla \cdot \alpha(u)\nabla u
\end{equation}
!et
The function $\alpha(u)$ has a major influence on the spatial term and affects the diffusion of the model. To solve this equation numerically, the equation needs to be discretized.
!bt
\begin{equation*}
	\left[D_t^-u=D_x(\alpha(u) D_x u)\right]
\end{equation*}
!et
This will result in a tridiagonal matrix A with the values
!bt
\begin{align} label{eq:matrix_spatial}
A_{i,i} =& 1+\frac{\Delta t}{\Delta x^2}(\alpha(u_{i+\frac{1}{2}})+\alpha(u_{i-\frac{1}{2}}))\notag\\
A_{i,i-1} =&-\frac{\Delta t}{\Delta x^2}(\alpha(u_{i-\frac{1}{2}}))\notag\\
A_{i,i+1} =&-\frac{\Delta t}{\Delta x^2}(\alpha(u_{i+\frac{1}{2}}))
\end{align}                               
!et
The boundary conditions are specified to be zero. Implementing these boundary conditions requires changes the following terms in the matrix, A.
!bt
\begin{align*}
A_{0,0} &= 1,\\
A_{0,1} &= 0,\\
A_{N_x,N_x-1} &= 0,\\
A_{N_x,N_x} &= 1
\end{align*}
!et
The b array with known values will be
!bt
\begin{align*}
b_0 &= 0,\\
b_i &= u^{n-1}_i,\quad i=1,\ldots,N_x-1,\\
b_{N_x} &= 0 
\end{align*}
!et

===== A linear solution =====
!bt
\begin{equation}
	\alpha(u) = k
\end{equation}
!et
Gives the following tridiagonal matrix
!bt
\begin{align*} label{eq:matrix_constant}
A_{i,i} =& 1+\frac{\Delta t}{\Delta x^2}(2k)=1+\frac{2k\Delta t}{\Delta x^2}\\
A_{i,i-1} =&-\frac{\Delta t}{\Delta x^2}(k)=-\frac{k \Delta t}{\Delta x^2}\\
A_{i,i+1} =&-\frac{\Delta t}{\Delta x^2}(k)=-\frac{k \Delta t}{\Delta x^2}\\
\end{align*}                               
!et
The simulation can be seem under

MOVIE: [../prosjekt_inf5631/paramovies/constant.webm, height=500,width=600]

!split
===== Nonlinear solutions =====
=== $\alpha(u)$ = u ===
!bt
\begin{equation}
	\alpha(u) = u\\
\end{equation}
!et

This gives a nonlinear problem. $u$ can here be replaced by $u\_$.
!bt
\begin{align*} 
A_{i,i} =& 1+\frac{\Delta t}{2\Delta x^2}(u\__{i+1}+2u\__{i}+u\__{i-1})\\
A_{i,i-1} =&-\frac{\Delta t}{2\Delta x^2}(u\__{i}+u\__{i-1})\\
A_{i,i+1} =&-\frac{\Delta t}{2\Delta x^2}(u\__{i+1}+u\__{i})
\end{align*}                               
!et
The function will be produced with different error tolerance. Picard iteration is used.

MOVIE: [../prosjekt_inf5631/submovies/ordinary_sub.webm, height=500,width=600]ordinary with different tolerance for Picard Iteration

=== $\alpha(u) = |\nabla(u)|$ ===
!bt
\begin{equation}
\alpha(u) = |\nabla(u)|
\end{equation}
!et

The first simulation utilizes a large error tolerance while the second one has a tolerance of $10^{-5}$.

MOVIE: [../prosjekt_inf5631/movies/spatial_abs_std.webm, height=500,width=600] Animation of a diffusion equation with $\alpha(u) = |\nabla(u)|$. A large error tolerance is used for Picard.

The noise error in the animation decreases as the function is flattened. The same simulation can be run with the error tolerance set to $10^{-5}$

MOVIE: [../prosjekt_inf5631/movies/spatial_abs_std_picard_tol__5.webm,height=500,width=600] The same simulation as the previous animation. Here the error tolerance is set to 10^-5

=== $\alpha(u) = |\nabla(u)|^m$ ===
!bt
\begin{equation}
	\alpha(u) = |\nabla(u)|^m
\end{equation}
!et
This equation is solved in the exact same way as the equation above. The matrix(ref{eq:matrix_absolute}) A from the section above can be used. A power, $m$, is added to the matrix.
!bt
\begin{align} label{eq:matrix_absolute}
A_{i,i} =& 1+\frac{\Delta t}{2\Delta x^2}(\left|\frac{u\__i-u\__{i-1}}{\Delta x}\right|^m+ \left|\frac{u\__{i+1}-u\__i}{\Delta x}\right|^m)\notag\\
A_{i,i-1} =&-\frac{\Delta t}{2\Delta x^2}(\left|\frac{u\__i-u\__{i-1}}{\Delta x}\right|^m)\notag\\
A_{i,i+1} =&-\frac{\Delta t}{2\Delta x^2}(\left|\frac{u\__{i+1}-u\__i}{\Delta x}\right|^m)
\end{align}                               
!et

MOVIE: [../prosjekt_inf5631/paramovies/abs_std_power.webm, height=500,width=600] 


!split
======= Solution for the biological model =======
The combination of the reaction part and the spatial part gives the reaction-diffusion equation(ref{eq:reaction_diffusion}). This can be inserted in a tridiagonal matrix.
!bt
\begin{align} label{eq:matrix_reaction_diffusion}
A_{i,i} =& 1+\Delta t(r(1-\frac{u^n_i}{m})+\frac{\alpha(u_{i+\frac{1}{2}})+\alpha(u_{i-\frac{1}{2}})}{\Delta x^2})\notag\\
A_{i,i-1} =&-\frac{\Delta t}{\Delta x^2}(\alpha(u_{i-\frac{1}{2}}))\notag\\
A_{i,i+1} =&-\frac{\Delta t}{\Delta x^2}(\alpha(u_{i+\frac{1}{2}}))
\end{align}                               
!et

The Fisher Kolmogoroff equation is used in the reaction term, $f(u)$.
===== Linear solutions =====
MOVIE: [../prosjekt_inf5631/paramovies/reac_constant_2.webm, height=500,width=600]

The setup for this simulation is a standard Fisher where $r=1$ and $M=1$, for the reaction term. 

MOVIE: [../prosjekt_inf5631/paramovies/reac_constant_M.webm, height=500,width=600]

Here they tend towards their capacity, while $\alpha$ drags them down at the boundary.

MOVIE: [../prosjekt_inf5631/paramovies/reac_constant_r.webm, height=500,width=600]

When the reproduction rate is to weak, the solution will not reach the capacity state, which is sat to 1. When $r$ becomes stronger, the solution reaches the carrying capacity, $M$.

!split
===== Nonlinear solutions =====
=== $\alpha(u)=|\nabla u|$ ===
Here, $\alpha$ is set to,
!bt
\begin{equation}
\alpha(u) = |\nabla(u)|
\end{equation}
!et

MOVIE: [../prosjekt_inf5631/paramovies/reac_abs_std_r.webm, height=500,width=600] Variations in the reproduction rate. Same function as the animation above. The carrying capacity is set to $M=1$

This simulation is run for twice as long as the other simulations. The interesting observation here is $r=0.1$. 


=== $\alpha(u)=|\nabla u|^m$ ===
The diffusion part becomes weaker as the derivative of $u$ goes towards 0.

MOVIE: [../prosjekt_inf5631/paramovies/reac_abs_std_power.webm, height=500,width=600] The function in the diffusion term is sat to $\alpha(u)=|\nabla u|^m$

The strength of the diffusion term decreases as the power increases, when the derivative of $u$ is under 1. 

!split
======= Further work =======
===== Dirichlet vs Neumann boundary condition =====

MOVIE: [../prosjekt_inf5631/paramovies/reac_boundary.webm, height=500,width=600]

Neumann preserves the area under the function, while Dirichlet smoothes it towards zero. 

!split
======= Bibliography =======

BIBFILE: ../bibliography/papers.pub
